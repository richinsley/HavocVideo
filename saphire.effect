-- Ice Ghost Effect 

-- The globals that will be expected to exist
EFFECTNAME = "Ice Ghost"

-- shader 1
UNIFORMCOUNT1 = 2
UNIFORMNAMES1 = { "alpha" , "diffuseTexture" }
UNIFORMVALUE1 = { 1.0 , 0 }
UNIFORMTYPE1 = { "float" , "sampler"}
UNIFORMID1 = { }

-- shader 2
UNIFORMCOUNT2 = 5
UNIFORMNAMES2 = { "diffuseTexture" , "diffwidth" , "diffheight" , "mixtexture" , "mixamount" }
UNIFORMVALUE2 = { 0 , 0.0 , 0.0 , 0 , 0.95}
UNIFORMTYPE2 = { "sampler" , "float" , "float" , "sampler" , "float" }
UNIFORMID2 = { 0 , 0 , 0 , 0 , 0}

NORMALUNIFORMCOUNT = 3
NORMALUNIFORMNAMES = { "diffwidth" , "diffheight" , "diffuseTexture" }
NORMALUNIFORMVALUE = { 0.0 , 0.0 , 0}
NORMALUNIFORMTYPE = { "float" , "float" , "sampler" }
NORMALUNIFORMID = { 0 , 0 , 0 }

APPLECOUNT = 5
APPLEUNIFORMNAMES = { "normalTexture" , "iceTexture", "lightTexture" , "ioffx" , "ioffy" }
APPLEUNIFORMVALUE = { 0 , 0 , 0 , 0.0, 0.0 }
APPLEUNIFORMTYPE = { "sampler" , "sampler" , "sampler" , "float" , "float" }
APPLEUNIFORMID = { 0 , 0 , 0 , 0 , 0 }

-- Internal data
DEFAULT = 0
PROGRAMID = 0
NORMALPROGID = 0
APPLEPROGID = 0

ACCUMULATORS = { 0 , 0 }
NORMALMAP = 0
ICEMAP = 0

SCALE = 0.25

-- create any resources that are needed for the lifetime of the effect
function alloc(userdata)
	PARENT = userdata
	
	UNIFORMVALUE2[2] = VIDEOWIDTH
	UNIFORMVALUE2[3] = VIDEOHEIGHT
	PROGRAMID = loadshader("Shader", "DilateMin", UNIFORMCOUNT2, UNIFORMNAMES2, UNIFORMVALUE2, UNIFORMTYPE2, UNIFORMID2, 0)
	NORMALPROGID = loadshader("Shader", "CalcNormal", NORMALUNIFORMCOUNT, NORMALUNIFORMNAMES, NORMALUNIFORMVALUE, NORMALUNIFORMTYPE, NORMALUNIFORMID, 0)
	APPLEPROGID = loadshader("Shader", "saphire", APPLECOUNT, APPLEUNIFORMNAMES, APPLEUNIFORMVALUE, APPLEUNIFORMTYPE, APPLEUNIFORMID, 0)
end

-- free all resources
function dealloc()

end

-- create any resources that are needed for the immidiate use of the effect
function init()
	resetuniforms(NORMALPROGID , NORMALUNIFORMCOUNT, NORMALUNIFORMVALUE, NORMALUNIFORMTYPE, NORMALUNIFORMID )
	
	ACCUMULATORS[1] = createFrameBuffer(PARENT, VIDEOWIDTH * SCALE, VIDEOHEIGHT * SCALE)
	ACCUMULATORS[2] = createFrameBuffer(PARENT, VIDEOWIDTH * SCALE, VIDEOHEIGHT * SCALE)
	NORMALMAP = createFrameBuffer(PARENT, VIDEOWIDTH * SCALE, VIDEOHEIGHT * SCALE)
	
	setShaderFloatUniform(PARENT, NORMALPROGID, NORMALUNIFORMID[1], VIDEOWIDTH * SCALE)
	setShaderFloatUniform(PARENT, NORMALPROGID, NORMALUNIFORMID[2], VIDEOHEIGHT * SCALE)
	
	ICEMAP = createFrameBufferFromFile(PARENT, "icemap")
end

-- free resources created in init
function deinit()
	freeFrameBuffer(PARENT, ACCUMULATORS[1])
	freeFrameBuffer(PARENT, ACCUMULATORS[2])
	freeFrameBuffer(PARENT, NORMALMAP)
	freeFrameBuffer(PARENT, ICEMAP)
end

-- render all passes with the final pass to render buffer -1
function render(time , rotx, roty, rotz, audioLevel, rotm, orientation)

	setShaderSampler(PARENT, PROGRAMID, UNIFORMID2[1], 2, ACCUMULATORS[1])
	setShaderSampler(PARENT, PROGRAMID, UNIFORMID2[4], 3, VIDEOTEXTURE)
	renderToFrameBuffer(PARENT, PROGRAMID, ACCUMULATORS[2], 0, 0.0, 1.0, 1.0, 0.0, 0.0)

	-- flip ACCUMULATORS
	local TACC = ACCUMULATORS[1]
	ACCUMULATORS[1] = ACCUMULATORS[2]
	ACCUMULATORS[2] = TACC

	setShaderSampler(PARENT, NORMALPROGID, NORMALUNIFORMID[3], 4, ACCUMULATORS[1])
	renderToFrameBuffer(PARENT, NORMALPROGID, NORMALMAP, 1, 0.0, 1.0, 1.0, 0.0, 0.0)
	
	itime , ftime = math.modf(time)
	ntime1 = scaleTime(time, 0.05, OSCSAW);
	--setShaderFloatUniform(PARENT, APPLEPROGID, APPLEUNIFORMID[4], ntime1 * -1.0)
	
	setShaderSampler(PARENT, APPLEPROGID, APPLEUNIFORMID[1], 5, NORMALMAP)
	setShaderSampler(PARENT, APPLEPROGID, APPLEUNIFORMID[2], 6, ICEMAP)
	setShaderSampler(PARENT, APPLEPROGID, APPLEUNIFORMID[3], 7, ACCUMULATORS[1])
	renderToFrameBuffer(PARENT, APPLEPROGID, DEFAULTFRAMEBUFFER, 1, 0.0, 1.0, 1.0, 0.0, 0.0)

end