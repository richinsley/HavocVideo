-- Star shader

-- The globals that will be expected to exist
EFFECTNAME = "Glitter"

BRITEUNIFORMCOUNT = 2
BRITEUNIFORMNAMES = { "minlum", "lumscale" }
BRITEUNIFORMVALUE = { 0.9, 1.0 }
BRITEUNIFORMID = { 0 , 0 }
BRITEUNIFORMTYPE = { "float" , "float" }

BLURHUNIFORMCOUNT = 2
BLURHUNIFORMNAMES = { "videowidth", "diffuseTexture" }
BLURHUNIFORMVALUE = { 0.0, 0.0 }
BLURHUNIFORMID = { 0 , 0 }
BLURHUNIFORMTYPE = { "float" , "sampler" }

BLURVUNIFORMCOUNT = 2
BLURVUNIFORMNAMES = { "videoheight", "diffuseTexture" }
BLURVUNIFORMVALUE = { 0.0, 0.0 }
BLURVUNIFORMID = { 0 , 0 }
BLURVUNIFORMTYPE = { "float" , "sampler" }

COMBINEUNIFORMCOUNT = 3
COMBINEUNIFORMNAMES = { "StarBrite", "StarSampH" , "StarSampV"  }
COMBINEUNIFORMVALUE = { 1.0, 0 , 0 }
COMBINEUNIFORMID = { 0 , 0 , 0 }
COMBINEUNIFORMTYPE = { "float" , "sampler", "sampler" }

-- Internal data
BRITEPROGRAMID = 0
BLURHPROGRAMID = 0
BLURVPROGRAMID = 0
COMBINEPROGRAMID = 0

-- temp buffers for multi passes
BRITEBUFFER = 0
HBLURBUFFER = 0
VBLURBUFFER = 0

IMAGESCALE = 4

-- create any resources that are needed for the lifetime of the effect
function alloc(userdata)
	PARENT = userdata
	BRITEPROGRAMID = loadshader("Shader", "Star_Brite", BRITEUNIFORMCOUNT, BRITEUNIFORMNAMES, BRITEUNIFORMVALUE, BRITEUNIFORMTYPE, BRITEUNIFORMID, 0)
	BLURHPROGRAMID = loadshader("Star_Hblur", "Star_Hblur", BLURHUNIFORMCOUNT, BLURHUNIFORMNAMES, BLURHUNIFORMVALUE, BLURHUNIFORMTYPE, BLURHUNIFORMID, 0)
	BLURVPROGRAMID = loadshader("Star_Vblur", "Star_Hblur", BLURVUNIFORMCOUNT, BLURVUNIFORMNAMES, BLURVUNIFORMVALUE, BLURVUNIFORMTYPE, BLURVUNIFORMID, 0)
	COMBINEPROGRAMID = loadshader("Shader", "Star_combine", COMBINEUNIFORMCOUNT, COMBINEUNIFORMNAMES, COMBINEUNIFORMVALUE, COMBINEUNIFORMTYPE, COMBINEUNIFORMID, 0)
end

-- free all resources
function dealloc()

end

-- create any resources that are needed for the immidiate use of the effect
function init()
	BRITEBUFFER = createFrameBuffer(PARENT, VIDEOWIDTH / IMAGESCALE , VIDEOHEIGHT / IMAGESCALE)
	HBLURBUFFER = createFrameBuffer(PARENT, VIDEOWIDTH / IMAGESCALE , VIDEOHEIGHT / IMAGESCALE)
	VBLURBUFFER = createFrameBuffer(PARENT, VIDEOWIDTH / IMAGESCALE , VIDEOHEIGHT / IMAGESCALE)
end

-- free resources created in init
function deinit()
	freeFrameBuffer(PARENT, BRITEBUFFER);
	freeFrameBuffer(PARENT, HBLURBUFFER);
	freeFrameBuffer(PARENT, VBLURBUFFER);
end

-- render all passes with the final pass to DEFAULTFRAMEBUFFER
function render(time , rotx, roty, rotz, audioLevel, rotm, orientation)

	-- render the video texture to the BRITEBUFFER
	renderToFrameBuffer(PARENT, BRITEPROGRAMID, BRITEBUFFER, 1, 0.0, 1.0, 1.0, 0.0, 0.0)

	-- set the sampler input of the diffuretexture in BLURHPROGRAMID to the luma buffer
	setShaderSampler(PARENT, BLURHPROGRAMID, BLURHUNIFORMID[2], 1, BRITEBUFFER)
	
	setShaderFloatUniform(PARENT, BLURHPROGRAMID, BLURHUNIFORMID[1], VIDEOWIDTH / IMAGESCALE)
	
	-- render the hblur into HBLURBUFFER
	renderToFrameBuffer(PARENT, BLURHPROGRAMID, HBLURBUFFER, 1, 0.0, 1.0, 1.0, 0.0, 0.0)

	-- set the sampler input of the diffuretexture in BLURVPROGRAMID to the luma buffer
	setShaderSampler(PARENT, BLURVPROGRAMID, BLURVUNIFORMID[2], 1, BRITEBUFFER)
	
	setShaderFloatUniform(PARENT, BLURVPROGRAMID, BLURVUNIFORMID[1], VIDEOHEIGHT / IMAGESCALE)
	
	-- render the hblur into VBLURBUFFER
	renderToFrameBuffer(PARENT, BLURVPROGRAMID, VBLURBUFFER, 1, 0.0, 1.0, 1.0, 0.0, 0.0)

	-- set the sampler input of the diffuretexture in BLURVPROGRAMID to the luma buffer
	setShaderSampler(PARENT, COMBINEPROGRAMID, COMBINEUNIFORMID[2], 2, HBLURBUFFER)
	
	-- set the sampler input of the diffuretexture in BLURVPROGRAMID to the luma buffer
	setShaderSampler(PARENT, COMBINEPROGRAMID, COMBINEUNIFORMID[3], 3, VBLURBUFFER)
	
	-- combine into the DEFAULTFRAMEBUFFER
	renderToFrameBuffer(PARENT, COMBINEPROGRAMID, DEFAULTFRAMEBUFFER, 1, 0.0, 1.0, 1.0, 0.0, 0.0)
end